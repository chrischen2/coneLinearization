function isom = calcIsomPerWatt(deviceSpectrum, photoreceptorSpectrum)
%CALCISOMPERWATT Calculates the rate of photoreceptor isomerizations per watt.
% This function computes the isomerization rate (isom) in photoreceptors
% induced by a given light source, integrating the product of the device's
% spectral power distribution and the photoreceptor's quantum efficiency
%. The result is normalized by the integral of
% the device's spectral power weighted by photon energy 

% Inputs:
% deviceSpectrum: A struct with the following fields:
%   - .wavelengths: Vector of wavelengths in meters (or nanometers to be converted),
%                   where the device's spectral power is sampled.
%   - .values: Vector of the device's spectral power distribution values at the
%              corresponding wavelengths.
%
% photoreceptorSpectrum: A struct with the following fields:
%   - .wavelengths: Vector of wavelengths in meters (or nanometers to be converted),
%                   where the photoreceptor's sensitivity is sampled.
%   - .values: Vector of the photoreceptor's quantum efficiency values at the
%              corresponding wavelengths.

% Output:
% isom: A single scalar value representing the calculated rate of photoreceptor
%       isomerizations per watt of incident light from the device.

% Planck's constant.
h = 6.62607004e-34; % m^2*kg/s
% Speed of light.
c = 299792458; % m/s

% Convert wavelengths from nm to meters if necessary
if (max(photoreceptorSpectrum.wavelengths) > 1)
    photoreceptorSpectrum.wavelengths = photoreceptorSpectrum.wavelengths * (10^-9);
end
if (max(deviceSpectrum.wavelengths) > 1)
    deviceSpectrum.wavelengths = deviceSpectrum.wavelengths * (10^-9);
end

% Resample the device spectrum at photoreceptor wavelengths
deviceSpectrum.values = interp1(deviceSpectrum.wavelengths, deviceSpectrum.values, photoreceptorSpectrum.wavelengths);
deviceSpectrum.wavelengths = photoreceptorSpectrum.wavelengths;

% Ensure no negative values
deviceSpectrum.values = max(deviceSpectrum.values, 0);
photoreceptorSpectrum.values = max(photoreceptorSpectrum.values, 0);

% Calculate differential wavelengths for integration approximation
dLs = diff(deviceSpectrum.wavelengths);
dLs(end+1) = dLs(end); % Assume last bin size equals the second to last

% Calculate isomerizations per joule of energy from the device
isom = sum((deviceSpectrum.values .* photoreceptorSpectrum.values) .* dLs) / ...
       sum((deviceSpectrum.values .* (h*c ./ deviceSpectrum.wavelengths)) .* dLs);

end
