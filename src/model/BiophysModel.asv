function [params]=BiophysModel(params)
    % BiophysModel: Simulates the response of a photoreceptor to light stimuli.
    %
    % Inputs:
    %   params: A structure containing parameters for the photoreceptor model.
    %       - sigma: Decay rate of receptor activity (1/sec).
    %       - phi: Decay rate of phosphodiesterase activity (1/sec).
    %       - eta: Activation rate constant for phosphodiesterase (1/sec).
    %       - gdark: Concentration of cyclic GMP (cGMP) in darkness.
    %       - k: Constant relating cGMP to current.
    %       - n: Cooperativity for the relation of cGMP to current.
    %       - cdark: Calcium concentration in darkness.
    %       - beta: Rate constant for calcium removal (1/sec).
    %       - kGC: Cooperativity for the cyclase (Hill coefficient). denoted
    %       as K_GC in preprint https://doi.org/10.7554/eLife.93795.2
    %       - hillaffinity: Hill affinity for the cyclase. denoted as "m" in
    %       preprint https://doi.org/10.7554/eLife.93795.2
    %       - gamma: Scaling factor for stimulus (rate of increase in opsin activity per R*/sec).
    %       - biophysFlag: Flag to select between biophysical (1) and linear (0) models.
    %       - tme: Time vector for the simulation.
    %       - stm: Stimulus vector corresponding to the time vector.
    %       - darkCurrent: Dark current level.
    %
    % Output:
    %   params: The input structure with an additional field:
    %       - response: The simulated photoreceptor response over time.
    %
    % The function simulates the photoreceptor's response based on a set of 
    % differential equations representing various biochemical processes, 
    % depending on the value of biophysFlag. When biophysFlag is set to 1, 
    % a detailed biophysical model is used. When it is set to 0, a simplified 
    % linear approximation is applied.


if (params.biophysFlag == 1)
    % Fixed parameters

    % gdark and cgmp2cur trade with each other to set dark current
    % calculate the cGMP concentration in dark based on dark current,
    % cooperativity, and cGMP-current relation
    params.gdark = (2 * params.darkCurrent / params.k)^(1/params.n);

    cur2ca = params.beta * params.cdark / params.darkCurrent;                % get q using steady state
    smax = params.eta/params.phi * params.gdark * (1 + (params.cdark / params.hillaffinity)^params.hillcoef);		% get smax using steady state

    clear g s c p r

    % Initialize the state variables for each component in the model
    g(1) = params.gdark;  % Initial cGMP concentration
    s(1) = params.gdark * params.eta/params.phi;		
    c(1) = params.cdark;   % Initial calcium concentration
    p(1) = params.eta/params.phi;  % Initial phosphodiesterase activity
    r(1) = 0; % Initial rhodopsin activity
   
    NumPts=length(params.tme);
    TimeStep=params.tme(2)-params.tme(1);

    % solve difference equations
    for pnt = 2:NumPts
        % Update rhodopsin activity
        r(pnt) = r(pnt-1) + TimeStep * (-params.sigma * r(pnt-1));
        % Adding Stim
        r(pnt) = r(pnt) + params.gamma * params.stm(pnt-1);
        % Update phosphodiesterase activity
        p(pnt) = p(pnt-1) + TimeStep * (r(pnt-1) + params.eta - params.phi * p(pnt-1));
        % Update calcium concentration
        c(pnt) = c(pnt-1) + TimeStep * (cur2ca * params.k * g(pnt-1)^params.n - params.beta * c(pnt-1));
        % Update synthesis rate
        s(pnt) = smax / (1 + (c(pnt) / params.hillaffinity)^params.hillcoef);
        % Update cGMP concentration
        g(pnt) = g(pnt-1) + TimeStep * (s(pnt-1) - p(pnt-1) * g(pnt-1));
    end
    % Calculate the photoreceptor current change
    params.response = -params.k * g.^params.n;
else   % linear
    % Compute the Linear model response
    filter = params.ScFact .* (((params.tme./params.TauR).^3)./(1+((params.tme./params.TauR).^3))) .* exp(-((params.tme./params.TauD))); 
    params.response = real(ifft(fft(params.stm) .* fft(filter))) - params.darkCurrent;
end

end

